name: Deno Deploy

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Update Configuration and Build"]
    types:
      - completed

env:
  APP_ID: ${{ secrets.APP_ID }}
  APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy
    environment: ${{ (github.ref == 'refs/heads/main' || github.event.workflow_run.head_branch == 'main') && 'main' || 'development' }}
    permissions:
      contents: write
      id-token: write

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Prepare Environment Variables
        run: |
          branch_name=$(echo '${{ github.event.workflow_run.head_branch || github.ref }}' | sed 's#refs/heads/##')
          project_name="${{ github.event.repository.name }}"
          echo "BRANCH_NAME=$branch_name" >> $GITHUB_ENV
          echo "PROJECT_NAME=$project_name" >> $GITHUB_ENV
          echo "IS_MAIN_BRANCH=${{ (github.ref == 'refs/heads/main' || github.event.workflow_run.head_branch == 'main') && 'true' || 'false' }}" >> $GITHUB_ENV

      - name: Create or Get Deno Deploy Project
        id: deno_project
        run: |
          set -e
          
          response=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.DENO_DEPLOY_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.deno.com/v1/projects/$PROJECT_NAME")
          
          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n -1)
          
          if [ "$http_code" = "200" ]; then
            echo "Project $PROJECT_NAME already exists"
            project_id=$(echo "$body" | jq -r '.id')
          elif [ "$http_code" = "404" ]; then
            echo "Creating new project: $PROJECT_NAME"
            create_response=$(curl -s -w "\n%{http_code}" \
              -X POST \
              -H "Authorization: Bearer ${{ secrets.DENO_DEPLOY_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$PROJECT_NAME\"}" \
              "https://api.deno.com/v1/organizations/${{ secrets.DENO_ORG_ID }}/projects")
          
            create_http_code=$(echo "$create_response" | tail -n1)
            create_body=$(echo "$create_response" | head -n -1)
          
            if [ "$create_http_code" = "201" ] || [ "$create_http_code" = "200" ]; then
              echo "Project created successfully"
              project_id=$(echo "$create_body" | jq -r '.id')
            else
              echo "Failed to create project. HTTP Code: $create_http_code"
              echo "Response: $create_body"
              exit 1
            fi
          else
            echo "Unexpected response when checking project. HTTP Code: $http_code"
            echo "Response: $body"
            exit 1
          fi
          
          echo "PROJECT_ID=$project_id" >> $GITHUB_ENV
          echo "project_id=$project_id" >> $GITHUB_OUTPUT

      - name: Set Environment Variables in Deno Deploy
        env:
          APP_ID: ${{ secrets.APP_ID }}
          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          BOT_USER_ID: ${{ secrets.BOT_USER_ID }}
          KERNEL_PUBLIC_KEY: ${{ secrets.KERNEL_PUBLIC_KEY }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          set -e
          
          env | while IFS='=' read -r var value; do
            case "$var" in
              GITHUB_*|RUNNER_*|CI|HOME|PATH|PWD|SHELL|USER|LANG|LC_*|TZ|DENO_*|PROJECT_*|BRANCH_*|IS_MAIN_*) 
                continue
                ;;
              *)
                if [ -n "$value" ]; then
                  echo "Setting environment variable: $var"
                  curl -s -X PATCH \
                    -H "Authorization: Bearer ${{ secrets.DENO_DEPLOY_TOKEN }}" \
                    -H "Content-Type: application/json" \
                    -d "{\"key\":\"$var\",\"value\":\"$value\"}" \
                    "https://api.deno.com/v1/projects/$PROJECT_ID/env" || echo "Warning: Failed to set $var"
                else
                  echo "Skipping empty environment variable: $var"
                fi
                ;;
            esac
          done

      - name: Deploy to Deno Deploy
        uses: denoland/deployctl@v1
        id: deno_deploy
        with:
          project: ${{ env.PROJECT_NAME }}
          entrypoint: deno.ts
          root: .

      - name: Generate Deployment URL
        id: deployment_url
        run: |
          if [ "$IS_MAIN_BRANCH" = "true" ]; then
            deployment_url="https://$PROJECT_NAME.deno.dev"
          else
            safe_branch_name=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9]/-/g' | tr '[:upper:]' '[:lower:]')
            deployment_url="https://$safe_branch_name--$PROJECT_NAME.deno.dev"
          fi
          echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
          echo "Deployment URL: $deployment_url"

      - name: Update manifest.json with deployment URL
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const manifestPath = path.resolve("${{ github.workspace }}", './manifest.json');
            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

            manifest["homepage_url"] = "${{ steps.deployment_url.outputs.deployment_url }}";

            const updatedManifest = JSON.stringify(manifest, null, 2);
            fs.writeFileSync(manifestPath, updatedManifest);
            console.log('Updated manifest:', updatedManifest);

      - name: Get GitHub App token
        if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ env.APP_ID }}
          private-key: ${{ env.APP_PRIVATE_KEY }}

      - name: Format manifest.json using Deno
        shell: bash
        run: |
          deno fmt --ext=json manifest.json

      - name: Commit file
        uses: swinton/commit@v2.x
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
        with:
          files: |
            manifest.json
          commit-message: "chore: [skip ci] update manifest.json url"
          ref: ${{ github.event.workflow_run.head_branch || github.ref }}

      - name: Write Deployment URL to Summary
        run: |
          echo "### Deployment URL" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.deployment_url.outputs.deployment_url }}" >> $GITHUB_STEP_SUMMARY